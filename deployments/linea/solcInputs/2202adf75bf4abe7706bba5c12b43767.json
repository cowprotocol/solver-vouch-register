{
  "language": "Solidity",
  "sources": {
    "src/contracts/VouchRegister.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-or-later\npragma solidity ^0.8;\n\ncontract VouchRegister {\n    event Vouch(\n        address indexed solver,\n        address indexed bondingPool,\n        address cowRewardTarget,\n        address indexed sender\n    );\n    event InvalidateVouch(\n        address indexed solver,\n        address indexed bondingPool,\n        address indexed sender\n    );\n\n    constructor() {}\n\n    /// @dev Allows a bonding pool to officially vouch for a solver\n    /// Anyone can call this function, but only the events where the sender is the owner\n    /// of the referenced bondingPool will be officially indexed\n    /// The owner of a bonding pool is identified by the address sending the full initial funding to the bonding pool\n    /// @param solver The solver for whom the bonding pool will cover potential losses/penalities\n    /// @param bondingPool Address of the bonding pool from which a potential loss will be covered\n    /// @param cowRewardTarget Address to which the solver COW Token reward should be send for the particular solver\n    function vouch(\n        address[] calldata solver,\n        address[] calldata bondingPool,\n        address[] calldata cowRewardTarget\n    ) public {\n        for (uint256 i = 0; i < solver.length; i++) {\n            emit Vouch(\n                solver[i],\n                bondingPool[i],\n                cowRewardTarget[i],\n                msg.sender\n            );\n        }\n    }\n\n    /// @dev Invalidates the vouching for a solver by a bonding pool\n    /// Anyone can call this function, but only the events where the sender is the owner\n    /// of the referenced bondingPool will be officially indexed\n    /// The owner of a bonding pool is identified by the address sending the full initial funding to the bonding pool\n    /// @param solver The solver for whom the bonding pool will no longer cover any losses/penalities\n    /// @param bondingPool Address of the official bonding pool, from which a potential loss will no longer be covered\n    function invalidateVouching(\n        address[] calldata solver,\n        address[] calldata bondingPool\n    ) public {\n        for (uint256 i = 0; i < solver.length; i++) {\n            emit InvalidateVouch(solver[i], bondingPool[i], msg.sender);\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}